datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(cuid())
    name          String?
    businessName  String?
    email         String?       @unique
    emailVerified DateTime?
    password      String?
    image         String?
    role          String        @default("USER")
    saldo         Decimal       @default(0)
    paypalId      String?
    activo        Boolean       @default(true)
    accounts      Account[]
    sessions      Session[]
    pista         Pista[]
    reserva       Reserva[]
    registro      Registro[]
    transaccion   Transaccion[]
    valoracion    Valoracion[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Pista {
    id                String       @id @default(cuid())
    nombre            String
    descripcion       String
    // ARRAY DE IMAGENES
    imagenes          String[]
    ubicacionLatitud  String
    ubicacionLongitud String
    telefono          String
    usuario           User         @relation(fields: [usuarioId], references: [id])
    usuarioId         String
    horarioApertura   String       @default("00:00")
    evento            Evento[]
    activa            Boolean      @default(true)
    valoracion        Valoracion[]
    reserva           Reserva[]
}

model Reserva {
    id                String   @id @default(cuid())
    fecha             DateTime
    fechaModificacion DateTime
    activa            Boolean
    usuario           User     @relation(fields: [usuarioId], references: [id])
    usuarioId         String
    evento            Evento   @relation(fields: [eventoId], references: [id])
    eventoId          String
    pista             Pista    @relation(fields: [pistaId], references: [id])
    pistaId           String

    transaccion Transaccion[]
}

model Evento {
    id          String    @id @default(cuid())
    nombre      String
    descripcion String
    precio      Decimal
    fechaInicio String
    fechaFin    String
    ocupada     Boolean   @default(false)
    pista       Pista?    @relation(fields: [pistaId], references: [id])
    pistaId     String?
    reserva     Reserva[]
}

// CADA VEZ QUE EL USUARIO HAGA UNA ACCION SE REGISTRARA EN ESTA TABLA
model Registro {
    id          String   @id @default(cuid())
    fecha       DateTime
    accion      String // EJEMPLO: Se ha creado una pista
    descripcion String // EJEMPLO: Se ha creado la pista con el nombre de "Pista 1"
    usuario     User     @relation(fields: [usuarioId], references: [id])
    usuarioId   String
    leido       Boolean  @default(false)
}

model Valoracion {
    id         String  @id @default(cuid())
    texto      String
    puntuacion Decimal
    usuario    User    @relation(fields: [usuarioId], references: [id])
    usuarioId  String
    pista      Pista   @relation(fields: [pistaId], references: [id])
    pistaId    String
}

model Transaccion {
    id        String   @id @default(cuid())
    fecha     DateTime
    amount    Decimal
    tipo      String
    estado    String   @default("Pendiente")
    usuario   User     @relation(fields: [usuarioId], references: [id])
    usuarioId String
    paypalId  String?
    reserva   Reserva? @relation(fields: [reservaId], references: [id])
    reservaId String?
}
